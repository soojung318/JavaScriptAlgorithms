// 호이스팅의 정의
//호출문
print();

//선언문
function print() {
    console.log("hellow world");
}

//함수 호출이 선언보다 위에 있지만 정상 작동
//자바스크립트 엔진이 코드를 해석하는 과정에서 프린트의 호출문이 프린트의 선언문 보다 아래에 작성되어 있는 코드로 받아들였기 때문.
//호이스팅: 프린트 함수의 선언문을 프린트 함수가 갖는 스코프, 즉 유효범위의 가장 위쪽으로 끌어올려서 코드를 해석하는 자바스크립트의 작동 방식을 "함수의 호이스팅"이라고 부른다.


//예제1 - var로 선언했을 경우
console.log(num); //undefined <<이번엔 ERROR가 아님.
var num = 10;

//이유 - 자바스크립트 엔진이 위 코드를 아래와 같이 해석했기 때문.
var num; //선언
console.log(num);  //undefined
num = 10; //초기화
//변수의 호이스팅을 변수의 초기화문과 헷갈릴 수도 있는데, 그게 아니고
//변수의 선언문만 해당 스코프에 최상단으로 올려 해석하는 방식이다.


//예제2 - let과 const로 선언했을 경우
console.log(num); // undefined
var num = 10;

console.log(num1); //error
let num1 = 10;

console.log(num2); //error
const num2 = 15;

//let과 const로 선언된 변수는 선언 전에 접근하려 하면 왜 error가 발생하는 지를 이해하기 위해서는 TDZ라는 특수한 공간에 대해서 알고 있어야 한다.
//TDZ; Temporal Dead Zone: 일시적인 사각지대, 변수를 사용하는 것을 허용하지 않는 공간이다.
//let과 const는 호이스팅이 발생하지 않는 것이 아니라, var과는 다르게 변수 스코프의 맨 위에서 변수 초기화가 완료될 때까지, TDZ라는 공간에 있기 때문에 호이스팅이 발생하지 않는 것처럼 보이는 것이다.
//var과 다르게 let과 const가 변수가 초기화 될때까지 TDZ에 머물러 있는 이유는, var는 변수를 생성한 다음 바로 메모리에 변수의 공간을 미리 할당해 주지만,
//let과 const는 그렇지 않기 때문에, 변수가 초기화 될 때까지 메모리 공간이 확보되지 않은 상태가 되어 해당 키워드로 생성된 변수들은 변수를 사용할 수 없는 공간이 TDZ에 들어가는 것이다.
//호이스팅은 자바스크립트의 기본 성질이지만, const와 let이외에도 TDZ에 머물러있는 몇 가지 구문들이 있기 때문에, 웬만하면 변수와 함수의 선언문 이후 변수와 함수에 접근하는 코드를 작성하는 것이 좋다.
//또한 호이스팅이 많이 발생하게 작성된 코드는 가독성이 좋지 않아 코드의 이해도가 떨어지고, 오류를 발생시킬 수 있다.

//결론: var 대신 let과 const를 선언해 사용하고, 함수는 호출 전에 미리 선언을 할 수 있도록 코드를 작성하자.